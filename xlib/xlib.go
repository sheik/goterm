// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sun, 27 Nov 2022 10:05:52 PST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package xlib

/*
#cgo pkg-config: x11
#include "X11/Xlib.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// XCreateSimpleWindow function as declared in X11/Xlib.h:1621
func XCreateSimpleWindow(Arg0 []Display, Arg1 uint64, Arg2 int32, Arg3 int32, Arg4 uint32, Arg5 uint32, Arg6 uint32, Arg7 uint64, Arg8 uint64) uint64 {
	cArg0, cArg0AllocMap := copyPDisplayBytes((*sliceHeader)(unsafe.Pointer(&Arg0)))
	cArg1, cArg1AllocMap := (C.Window)(Arg1), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (C.int)(Arg2), cgoAllocsUnknown
	cArg3, cArg3AllocMap := (C.int)(Arg3), cgoAllocsUnknown
	cArg4, cArg4AllocMap := (C.uint)(Arg4), cgoAllocsUnknown
	cArg5, cArg5AllocMap := (C.uint)(Arg5), cgoAllocsUnknown
	cArg6, cArg6AllocMap := (C.uint)(Arg6), cgoAllocsUnknown
	cArg7, cArg7AllocMap := (C.ulong)(Arg7), cgoAllocsUnknown
	cArg8, cArg8AllocMap := (C.ulong)(Arg8), cgoAllocsUnknown
	__ret := C.XCreateSimpleWindow(cArg0, cArg1, cArg2, cArg3, cArg4, cArg5, cArg6, cArg7, cArg8)
	runtime.KeepAlive(cArg8AllocMap)
	runtime.KeepAlive(cArg7AllocMap)
	runtime.KeepAlive(cArg6AllocMap)
	runtime.KeepAlive(cArg5AllocMap)
	runtime.KeepAlive(cArg4AllocMap)
	runtime.KeepAlive(cArg3AllocMap)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (uint64)(__ret)
	return __v
}

// XMapWindow function as declared in X11/Xlib.h:2816
func XMapWindow(Arg0 []Display, Arg1 uint64) int32 {
	cArg0, cArg0AllocMap := copyPDisplayBytes((*sliceHeader)(unsafe.Pointer(&Arg0)))
	cArg1, cArg1AllocMap := (C.Window)(Arg1), cgoAllocsUnknown
	__ret := C.XMapWindow(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// XNextEvent function as declared in X11/Xlib.h:2851
func XNextEvent(Arg0 []Display, Arg1 []XEvent) int32 {
	cArg0, cArg0AllocMap := copyPDisplayBytes((*sliceHeader)(unsafe.Pointer(&Arg0)))
	cArg1, cArg1AllocMap := copyPXEventBytes((*sliceHeader)(unsafe.Pointer(&Arg1)))
	__ret := C.XNextEvent(cArg0, cArg1)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// XSelectInput function as declared in X11/Xlib.h:3139
func XSelectInput(Arg0 []Display, Arg1 uint64, Arg2 int64) int32 {
	cArg0, cArg0AllocMap := copyPDisplayBytes((*sliceHeader)(unsafe.Pointer(&Arg0)))
	cArg1, cArg1AllocMap := (C.Window)(Arg1), cgoAllocsUnknown
	cArg2, cArg2AllocMap := (C.long)(Arg2), cgoAllocsUnknown
	__ret := C.XSelectInput(cArg0, cArg1, cArg2)
	runtime.KeepAlive(cArg2AllocMap)
	runtime.KeepAlive(cArg1AllocMap)
	runtime.KeepAlive(cArg0AllocMap)
	__v := (int32)(__ret)
	return __v
}
